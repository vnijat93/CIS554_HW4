/**
 * @file CAI.cpp
 * @author: Varis Nijat
 * CIS 554-M401 Object Oriented Programming in C++
 * Syracuse University
 * HW #4 - Making A Difference
 *
 * @brief The implementation of the Computer-Assisted Instruction (CAI) class
**/

#include "CAI.h"
#include <time.h>
#include <iomanip>
#include <iostream>
#include <random>

// using std::srand;
using std::cout;
using std::endl;
// using std::rand;


/**
 * Clacc constructor specifying number of asterisks to display.
 * @param pt: represents the type of the arithemetic operation
 * @param dl: respresents the level of difficulty
*/
CAI::CAI(int pt, int dl){
    problemType = pt;
    difficultyLevel = dl;
}

/**
 * @param newProblemType integer, set the problem type to the given option.
*/
void CAI::setProblemType(int newProblemmType){
    problemType = newProblemmType;
}

/**
 * @return problemType integer, the problem type.
*/
int CAI::getProblemType() const{
    return problemType;
}

/**
 * @param newDifficultyLevel integer, set the level of difficulty to
 *     the given option.
*/
void CAI::setDifficultyLevel(int newDifficultyLevel){
    difficultyLevel = newDifficultyLevel;
}

/**
 * @return difficultyLevel integer, the current level of difficulty
*/
int CAI::getDifficultyLevel() const{
    return difficultyLevel;
}

/**
 * Geneerate a random number using the uniform_int_distribution.
 * @param lowerLimit integer, the minimum potentially generated value
 * @param upperLimit integer, the maximum potentially generated value
 * @returns randomNumber integer, a random number generated by uniform_int_distribution
*/
int CAI::generateRandomNumber(int lowerLimit, int upperLimit) const{

    // Solutions presented in text book did not work for me.
    // Regardless how i tried, found this solution here
    // https://stackoverflow.com/questions/16153589/generating-a-uniform-random-integer-in-c
    std::random_device random_device;
    std::mt19937 generator(random_device());
    std::uniform_int_distribution<> randomInt(lowerLimit, upperLimit);

    int randomNumber = randomInt(generator);

    return randomNumber;
}

/**
 * Geneerate a random number for arithemetic question. The range is determined
 * by the private data member difficultyLevel.
 * @param offset integer, a number that can be added to the lower limit in
 *     order to avoid centain numbers. Default to 0.
 * @returns randomNumber integer, a random number generated by uniform_int_distribution
*/
int CAI::generateRandomNumberForQuestions(int offset) const{

    int randomNumberForQuestion;

    // 1 -> All numbers are single digit
    // 2 -> Numbers as large as two digits
    // 3 -> Numbers as large as three digits
    // 4 -> Numbers as large as four digits
    // 5 -> Numbers as large as five digits
    switch(difficultyLevel){
        case 1:
            randomNumberForQuestion = generateRandomNumber(offset, 9);
            break;
        case 2:
            randomNumberForQuestion = generateRandomNumber(offset, 99);
            break;
        case 3:
            randomNumberForQuestion = generateRandomNumber(offset, 999);
            break;
        case 4:
            randomNumberForQuestion = generateRandomNumber(offset, 9999);
            break;
        case 5:
            randomNumberForQuestion = generateRandomNumber(offset, 99999);
            break;
    }
    return randomNumberForQuestion;
}

/**
 * Geneerate a arithemetic question based on problemType and difficultyLevel.
 * It calls generateRandomNumberForQuestions for two random numbers.
 * @param questionNumber integer, used to help users to keep track of their progress
 * @returns answer integer, the correct answer to the generated question.
*/
int CAI::generateQuestion(int questionNumber) const{

    // generate two random numbers for the question
    int rand1 = generateRandomNumberForQuestions();
    int rand2 = generateRandomNumberForQuestions();

    // initialize answer to store the answer to the question
    int answer;
    // initialize probTy to store the problemType and utilize switch
    int probTy;

    // If the problem type is 5, generate a random number between 1 and 4
    // and assign the generated random number to probTy
    // If the problem type is not 5, assign problemType to probTy
    if (problemType == 5){
        probTy = generateRandomNumber(1, 4); 
    }
    else{
        probTy = problemType;
    }

    // Display question number
    cout << "Question Number " << questionNumber << " : ";

    // Construct the question and calculate the answer
    // Display the question in console
    switch(probTy){
        case 1:
            answer = rand1 + rand2;
            cout << "How much is " << rand1 << " plus " << rand2 << "?" << endl;
            break;
        case 2:
            answer = rand1 - rand2;
            cout << "How much is " << rand1 << " minus " << rand2 << "?" << endl;
            break;
        case 3:
            answer = rand1 * rand2;
            cout << "How much is " << rand1 << " times " << rand2 << "?" << endl;
            break;
        case 4:
            // Regenerate a nonzero integer in order to avoid numbers being
            // divided by 0
            if (rand2 == 0){
                rand2 = generateRandomNumberForQuestions(1);
            }

            // since we are only working with integers, calculate the product of
            // the two numbers first and use the product as the number thats being
            // divided. In this case, answer will be rand1.
            int product = rand1 * rand2;
            answer = rand1;
            cout << "How much is " << product << " divided by " << rand2 << "?" << endl;
            break;           
    }

    return answer;
}


/**
 * Display a positive respnse if the user answered the question correctly
*/
void CAI::displayPositiveResponse(){

    // generate a random number between 0 and 3
    int response = generateRandomNumber(0, 3);

    // Use the generated random number and switch to display a positive response.
    switch(response){
        case 0:
            cout << "Very good!\n" << endl;
            break;
        case 1:
            cout << "Excellent!\n" << endl;
            break;
        case 2:
            cout << "Nice work!\n" << endl;
            break;
        case 3:
            cout << "Keep up the good work!\n" << endl;
            break;
    }
}


/**
 * Display a negative respnse if the user answered the question incorrectly
*/
void CAI::displayNegativeResponse(){

    // generate a random number between 0 and 3
    int response = generateRandomNumber(0, 3);

    // Use the generated random number and switch to display a negative response.
    switch(response){
        case 0:
            cout << "You got it wrong. You will get it right next time\n" << endl;
            break;
        case 1:
            cout << "That was a wrong answer.\n" << endl;
            break;
        case 2:
            cout << "Wrong answer. But don't give up\n" << endl;
            break;
        case 3:
            cout << "No. That's not the answer\n" << endl;
            break;
    }
}
