/**
 * @file CAI.h
 * @author: Varis Nijat
 * CIS 554-M401 Object Oriented Programming in C++
 * Syracuse University
 * HW #4 - Making A Difference
 * 
**/

#ifndef CAI_H
#define CAI_H

/**
 * Implementation of the Computer  class for HW4.
 * 
 * A CAI class has two private data members
 * - problemType: an integer thats between 1 and 5 which represents the arithemetic
 *      operation a user want to study
 *      1 -> Addition
 *      2 -> Subtraction
 *      3 -> Multiplication
 *      4 -> Division
 *      5 -> Random Mixture of Above Operations
 * - difficultyLevel: an integer thats between 1 and 5 which represents the level
 *      of defificulty a user decided to study.
 *      1 -> All numbers are single digit
 *      2 -> Numbers as large as two digits
 *      3 -> Numbers as large as three digits
 *      4 -> Numbers as large as four digits
 *      5 -> Numbers as large as five digits
**/

class CAI{

    private:

        int problemType;     /**< represents the type of the arithemetic operation */
        int difficultyLevel; /**< respresents the level of difficulty */

    public:
        /**
         * Clacc constructor specifying probelem typoes and the level of difficulty.
        */
        CAI(int problemType, int difficultyLevel);

        /**
         * @param newProblemType integer, set the problem type to the given option.
        */
        void setProblemType(int newProblemType);

        /**
         * @return problemType integer, the problem type.
        */
        int getProblemType() const;

        /**
         * @param newDifficultyLevel integer, set the level of difficulty to
         *     the given option.
        */
        void setDifficultyLevel(int newDifficultyLevel);

        /**
         * @return difficultyLevel integer, the current level of difficulty
        */
        int getDifficultyLevel() const;

        /**
         * Geneerate a random number using the uniform_int_distribution.
         * @param lowerLimit integer, the minimum potentially generated value
         * @param upperLimit integer, the maximum potentially generated value
         * @returns randomNumber integer, a random number generated by uniform_int_distribution
        */
        int generateRandomNumber(int lowerLimit, int upperLimit) const;

        /**
         * Geneerate a random number for arithemetic question. The range is determined
         * by the private data member difficultyLevel.
         * @param offset integer, a number that can be added to the lower limit in
         *     order to avoid centain numbers.
         * @returns randomNumber integer, a random number generated by uniform_int_distribution
        */
        int generateRandomNumberForQuestions(int offset=0) const;

        /**
         * Geneerate a arithemetic question based on problemType and difficultyLevel.
         * It calls generateRandomNumberForQuestions for two random numbers.
         * @param questionNumber integer, used to help users to keep track of their progress
         * @returns answer integer, the correct answer to the generated question.
        */
        int generateQuestion(int questionNumber) const;

        /**
         * Display a positive respnse if the user answered the question correctly
        */
        void displayPositiveResponse();

        /**
         * Display a negative respnse if the user answered the question incorrectly
        */
        void displayNegativeResponse();

};

#endif
